import sys
import System
from time import gmtime, strftime

#
# generated filenames
#

class FilenameProvider:
	def __init__(self, documentation):
		self.documentation = documentation

	def type(self, dotnetType):
		if dotnetType.IsGenericType and not dotnetType.IsGenericTypeDefinition:
			t = dotnetType.GetGenericTypeDefinition()
		else:
			t = dotnetType

		return "T_" + t.FullName + ".html"

	def namespace(self, str):
		return "N_" + str + ".html"


class HtmlTemplate:
	def __init__(self):
		self.title  = ""
		self.h1     = ""
		self.header = ""
		self.main   = ""
		self.footer = ""

	def write(self):
		return """<html>
				<head>
					<title>%s</title>
				</head>
				<body>
					<h1>%s</h1>
					<!-- header -->
					<header>
					%s
					</header>
					<!-- main area -->
					<section>
					%s
					</section>
					<!-- footer -->
					<footer>
					%s
					</footer>
				</body>
			</html>
	""" % (self.title, self.h1 or self.title, self.header, self.main, self.footer)

	def write_to(self, file):
		f = open(file, 'w')
		f.write(self.write())
		f.close()

	@staticmethod
	def fmt_non_empty(template, contents):
		"""Formats the contents into template, if the contents are not empty."""
		if len(contents):
			return template % contents
		else:
			return ""


class TypeHelper:
	def __init__(self, documentation, filenameProvider, dotnetType):
		self.documentation    = documentation
		self.filenameProvider = filenameProvider
		self.dotnetType       = dotnetType

	def name(self):
		if self.dotnetType.IsGenericParameter:
			# e.g. T when found inside SomeType<T>
			return self.dotnetType.Name

		if self.dotnetType.ContainsGenericParameters and self.dotnetType.IsGenericType:
			t = System.Type.GetGenericTypeDefinition(self.dotnetType)
		else:
			t = self.dotnetType

		if t.IsGenericType:
			return t.FullName.Split('`')[0] + "&lt;" + ", ".join(subType.Name for subType in t.GetGenericArguments()) + "&gt;"
		else:
			return self.__sysname(t) or t.FullName

	def short_name(self):
		if self.dotnetType.IsGenericParameter:
			# e.g. T when found inside SomeType<T>
			return self.dotnetType.Name

		if self.dotnetType.ContainsGenericParameters and self.dotnetType.IsGenericType:
			t = System.Type.GetGenericTypeDefinition(self.dotnetType)
		else:
			t = self.dotnetType

		if t.IsGenericType:
			return t.Name.Split('`')[0] + "&lt;" + ", ".join(subType.Name for subType in t.GetGenericArguments()) + "&gt;"
		else:
			return self.__sysname(t) or t.Name

	def type_kind(self):
		type_kind = ""
		if self.dotnetType.IsEnum:
			type_kind = "Enumeration"
		elif self.dotnetType.IsValueType:
			type_kind = "Struct"
		elif self.dotnetType.IsInterface:
			type_kind = "Interface"
		elif self.dotnetType.IsClass:
			type_kind = "Class"
		else:
			# what else?
			type_kind = "Type"

		return type_kind

	def link(self):
		t = self.dotnetType
		if t.IsArray:
			raise ValueError("Can not link to an array")

		if t.IsGenericType and not t.IsGenericTypeDefinition:
			raise ValueError("Can not link to closed generic types")

		if self.documentation.IsLocalType(t):
			link = self.filenameProvider.type(t)
			return link
		else:
			return None

	def __sysname(self, t):
		"""Return the alias of a system type, e.g. object instead of System.Object"""
		builtins = {
			"System.Boolean" : "bool",
			"System.Object"  : "object",
			"System.Int32"   : "int",
			"System.String"  : "string"
		}

		if t.FullName in builtins:
			return builtins[t.FullName]
		else:
			return None

class HtmlGenerator:
	def __init__(self, documentation):
		self.documentation = documentation
		self.filenameProvider = FilenameProvider(documentation)
		self.htmlTemplate = HtmlTemplate()
		self.htmlTemplate.header = self.nav()
		self.htmlTemplate.footer = """Generated by IglooCastle at
			""" + strftime("%Y-%m-%d %H:%M:%S", gmtime()) + """
			<link type=\"text/css\" rel=\"stylesheet\" href=\"style.css\" />
			</footer>"""

	def generate_index_page(self):
		pass

	def generate_namespace_pages(self):
		print "Namespaces:"
		for namespaceElement in self.documentation.Namespaces:
			namespace = namespaceElement.Namespace
			print namespace
			self.htmlTemplate.title = namespace
			self.htmlTemplate.write_to(self.filenameProvider.namespace(namespace))

	def generate_type_page(self, typeElement):
		dotnetType = typeElement.Type
		typeHelper = self.__type_helper(dotnetType)
		fullName = typeHelper.name()
		type_kind = typeHelper.type_kind()

		self.htmlTemplate.title = "%s %s" % (fullName, type_kind)
		self.htmlTemplate.main  = HtmlTemplate.fmt_non_empty("""
				<h2>Summary</h2>
				<p>%s</p>""", typeElement.XmlComment.Summary) + self.type_properties(typeElement) + self.type_methods(typeElement)
		self.htmlTemplate.write_to(self.filenameProvider.type(typeElement.Type))

	def generate_type_pages(self):
		print "Types:"
		for typeElement in self.documentation.Types:
			self.generate_type_page(typeElement)

	def generate_nant_task_pages(self):
		print "NAnt tasks:"
		for typeElement in self.documentation.Types:
			if typeElement.HasAttribute('NAnt.Core.Attributes.TaskName'):
				taskName = typeElement.GetAttribute('NAnt.Core.Attributes.TaskName').Name
				print "todo: generate page for nant task " + taskName



	#
	# linking
	#

	def type_link(self, t):
		if t.IsArray:
			return self.type_link(t.GetElementType()) + "[]"

		if t.IsGenericType and not t.IsGenericTypeDefinition:
			return self.type_link(t.GetGenericTypeDefinition())

		typeHelper = self.__type_helper(t)
		link = typeHelper.link()
		if link:
			return "<a href=\"%s\">%s</a>" % (link, typeHelper.short_name())
		else:
			return typeHelper.name()

	#
	# core
	#

	def format_parameter(self, parameterInfo):
		return self.type_link(parameterInfo.ParameterType) + " " + parameterInfo.Name

	def member_list_item(self, typeElement, memberElement):
		if memberElement.Member.DeclaringType != typeElement.Type:
			inheritedLink = "(inherited from %s)" % self.type_link(memberElement.Member.DeclaringType)
		else:
			inheritedLink = ""

		if isinstance(memberElement.Member, System.Reflection.PropertyInfo):
			name = memberElement.Member.Name + " : " + self.type_link(memberElement.Property.PropertyType)
		else:
			name = self.type_link(memberElement.Method.ReturnType) + " " + memberElement.Member.Name + "(" + ",".join(self.format_parameter(p) for p in memberElement.Method.GetParameters()) + ")"

		result = """<li>
			<dl>
				<dt>%s</dt>
				<dd>%s %s</dd>
			</dl>
		</li>""" % (name, memberElement.XmlComment.Summary, inheritedLink)

		return result

	def type_properties(self, typeElement):
		return HtmlTemplate.fmt_non_empty(
			"<h2>Properties</h2><ul>%s</ul>",
			''.join(self.member_list_item(typeElement, p) for p in typeElement.Properties))

	def type_methods(self, typeElement):
		result = ""
		for p in typeElement.Methods:
			result = result + self.member_list_item(typeElement, p)
		if len(result):
			result = "<h2>Methods</h2><ul>" + result + "</ul>"

		return result

	def nav(self):
		result = "<ol>"
		for n in self.documentation.Namespaces:
			result = result + "<li>" + n.Namespace + " Namespace</li>"
			result = result + "<ol>"
			for t in n.Types:
				typeHelper = self.__type_helper(t.Type)
				result = result + "<li>"
				result = result + ( "<a href=\"%s\">%s</a>" % (typeHelper.link(), typeHelper.short_name() + " " + typeHelper.type_kind()) )
				result = result + "</li>"

			result = result + "</ol>"
		result = result + "</ol>"

		return result

	def __type_helper(self, dotNetType):
		return TypeHelper(self.documentation, self.filenameProvider, dotNetType)



def Generate(documentation):
	"""Entry point for IglooCastle"""
	print "Hello from python!"
	htmlGenerator = HtmlGenerator(documentation)
	htmlGenerator.generate_index_page()
	htmlGenerator.generate_namespace_pages()
	htmlGenerator.generate_type_pages()
	htmlGenerator.generate_nant_task_pages()
