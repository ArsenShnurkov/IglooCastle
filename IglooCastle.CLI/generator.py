import sys
import System
from time import gmtime, strftime

#
# generated filenames
#

class FilenameProvider:
	def __init__(self, documentation):
		self.documentation = documentation

	def type(self, dotnetType):
		return "T_" + self.documentation.TypeFullName(dotnetType) + ".html"

	def namespace(self, str):
		return "N_" + str + ".html"


class HtmlTemplate:
	def __init__(self):
		self.title  = ""
		self.h1     = ""
		self.header = ""
		self.main   = ""
		self.footer = ""

	def write(self):
		return """<html>
				<head>
					<title>%s</title>
				</head>
				<body>
					<h1>%s</h1>
					<!-- header -->
					<header>
					%s
					</header>
					<!-- main area -->
					<section>
					%s
					</section>
					<!-- footer -->
					<footer>
					%s
					</footer>
				</body>
			</html>
	""" % (self.title, self.h1 or self.title, self.header, self.main, self.footer)

	def writeTo(self, file):
		f = open(file, 'w')
		f.write(self.write())
		f.close()

	@staticmethod
	def fmtOptional(template, contents):
		if len(contents):
			return template % contents
		else:
			return ""


class HtmlGenerator:
	def __init__(self, documentation):
		self.documentation = documentation
		self.filenameProvider = FilenameProvider(documentation)
		self.htmlTemplate = HtmlTemplate()
		self.htmlTemplate.header = self.nav()
		self.htmlTemplate.footer = """Generated by IglooCastle at
			""" + strftime("%Y-%m-%d %H:%M:%S", gmtime()) + """
			<link type=\"text/css\" rel=\"stylesheet\" href=\"style.css\" />
			</footer>"""

	def generateIndexPage(self):
		pass

	def generateNamespacePages(self):
		print "Namespaces:"
		for namespaceElement in self.documentation.Namespaces:
			namespace = namespaceElement.Namespace
			print namespace

			self.htmlTemplate.title = namespace
			self.htmlTemplate.writeTo(self.filenameProvider.namespace(namespace))

	def generateTypePage(self, typeElement):
		fullName = self.documentation.TypeFullName(typeElement.Type)
		dotnetType = typeElement.Type

		prefix = ""
		if dotnetType.IsEnum:
			prefix = "Enum"
		elif dotnetType.IsValueType:
			prefix = "Struct"
		elif dotnetType.IsInterface:
			prefix = "Interface"
		elif dotnetType.IsClass:
			prefix = "Class"
		else:
			# what else?
			prefix = "Type"

		self.htmlTemplate.title = "%s %s" % (prefix, fullName)
		self.htmlTemplate.main  = HtmlTemplate.fmtOptional("""
				<h2>Summary</h2>
				<p>%s</p>""", typeElement.XmlComment.Summary) + self.typeProperties(typeElement) + self.typeMethods(typeElement)
		self.htmlTemplate.writeTo(self.filenameProvider.type(typeElement.Type))

	def generateTypePages(self):
		print "Types:"
		for typeElement in self.documentation.Types:
			self.generateTypePage(typeElement)

	def generateNantTaskPages(self):
		print "NAnt tasks:"
		for typeElement in self.documentation.Types:
			if typeElement.HasAttribute('NAnt.Core.Attributes.TaskName'):
				taskName = typeElement.GetAttribute('NAnt.Core.Attributes.TaskName').Name
				print "todo: generate page for nant task " + taskName



	#
	# linking
	#

	def typeLink(self, t):
		typeFullName = self.documentation.TypeFullName(t)
		print "Type %s, full name %s" % (t, typeFullName)

		if self.documentation.IsLocalType(t):
			link = self.filenameProvider.type(t)
			print link
			return "<a href=\"" + link + "\">" + typeFullName + "</a>"
		else:
			print typeFullName
			return typeFullName

	#
	# core
	#

	def memberListItem(self, typeElement, memberElement):
		if memberElement.Member.DeclaringType != typeElement.Type:
			inheritedLink = "(inherited from %s)" % self.typeLink(memberElement.Member.DeclaringType)
		else:
			inheritedLink = ""


		if isinstance(memberElement.Member, System.Reflection.PropertyInfo):
			name = memberElement.Member.Name + " : " + self.typeLink(memberElement.Property.PropertyType)
		else:
			name = memberElement.Member.Name

		result = """<li>
			<dl>
				<dt>%s</dt>
				<dd>%s %s</dd>
			</dl>
		</li>""" % (name, memberElement.XmlComment.Summary, inheritedLink)

		return result

	def typeProperties(self, typeElement):
		return HtmlTemplate.fmtOptional(
			"<h2>Properties</h2><ul>%s</ul>",
			''.join(self.memberListItem(typeElement, p) for p in typeElement.Properties))

	def typeMethods(self, typeElement):
		print 'typeMethods'
		result = ""
		for p in typeElement.Methods:
			result = result + self.memberListItem(typeElement, p)
		if len(result):
			result = "<h2>Methods</h2><ul>" + result + "</ul>"

		return result

	def nav(self):
		result = ""
		for t in self.documentation.Types:
			result = result + "<li>" + self.typeLink(t.Type) + "</li>"
		if len(result):
			result = "<nav><ul>" + result + "</ul></nav>"

		return result


def Generate(documentation):
	print "Hello from python!"
	htmlGenerator = HtmlGenerator(documentation)
	htmlGenerator.generateIndexPage()
	htmlGenerator.generateNamespacePages()
	htmlGenerator.generateTypePages()
	htmlGenerator.generateNantTaskPages()
